imports:
- "$import glob"
- "$import os"
input_channels: 3
output_classes: 5

bundle_root: "./"
device: "cuda"

dataset_dir: /data/PandaChallenge2020/train_images  
data_list_file_path: "$@bundle_root + '/scripts/datalist_panda_0.json'"
datalist: "$monai.data.load_decathlon_datalist(@data_list_file_path, data_list_key='testing', base_dir=@dataset_dir)"   
output_dir: "$@bundle_root + '/eval'"


amp: true                                                     
determ: false                                                 
quick: false                                                 
epochs: 50                                                    
weight_decay: 0                                               
val_every: 1                                                 
tile_count: 44                                            
tile_size: 256                                        
num_classes: 5                                          
batch_size: 4                                 
workers: 2                                               
optim_lr: 3.e-5      

                                
# ckpt_dir: "$@bundle_root + 'models'"                          
# output_dir: "$@bundle_root + 'eval'"                          
# eval_ckpt_path: "$@bundle_root + 'models/model.pt'"           
# pretrained_ckpt_path: null


network_def:
  _target_: monai.networks.nets.milmodel
  num_classes: "@output_classes"
  pretrained: false
  mil_mode: att_trans

network: "$@network_def.to(@device)"


preprocessing:
  _target_: Compose
  transforms:
  - _target_: LoadImaged
    keys: image
    reader: "$WSIReader" 
    backend: cucim
    dtype: "$np.uint8"
    level: 1
    image_only: true
  - _target_: LabelEncodeIntegerGraded
    keys: label
    num_classes: "@output_classes"
    allow_missing_keys: true
  - _target_: GridPatchd
    keys: image
    patch_size: "$[@tile_size, @tile_size]"
    threshold: "$ 0.999 * 3 * 255 * @tile_size * @tile_size"
    pad_mode: null
    constant_values: 255
  - _target_: SplitDimd
    keys: image
    dim: 0
    keepdim: false
    list_output: true 
  - _target_: ScaleIntensityRanged
    keys: image
    a_min: "$np.float32(255)"
    a_max: "$np.float32(0)"
  - _target_: ToTensord
    keys: ["image", "label"]


dataset:
  _target_: Dataset
  data: "@datalist"
  transform: "@preprocessing"

dataloader:
  _target_: DataLoader
  dataset: "@dataset"
  batch_size: 1
  shuffle: false
  num_workers: 4
  pin_memory: True
  collate_fn: "$list_data_collate"
  
inferer:
  _target_: SlidingWindowInferer #FIXME, we use a custom infererer loop
  roi_size:
  - 96
  - 96
  - 96
  sw_batch_size: 4
  overlap: 0.625

postprocessing: #FIXME, there is not postprocessing transform
  _target_: Compose
  transforms:
  - _target_: Activationsd
    keys: pred
    softmax: true


handlers:
- _target_: CheckpointLoader
  load_path: "$@bundle_root + '/models/model.pt'"
  load_dict:
    model: "@network"

- _target_: StatsHandler
  iteration_log: false

evaluator:
  _target_: SupervisedEvaluator
  device: "@device"
  val_data_loader: "@dataloader"
  network: "@network"
  inferer: "@inferer"
  postprocessing: "@postprocessing"
  val_handlers: "@handlers"
  amp: true

evaluating:
- "$setattr(torch.backends.cudnn, 'benchmark', True)"
- "$@evaluator.run()"
